Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	uniform vec3 cameraPos;

	varying vec3 rayDir;
	uniform sampler2D probeTexture;


	uniform vec4 lightPos[2];
	uniform vec3 lightPowerDensity[2];
	uniform vec3 spotDir[2];

	uniform mat4 mcc[39];
	uniform mat4 quadrics[104];
	uniform vec4 brdfs[52];
	uniform vec3 goldR0;
	uniform vec3 silverR0;

	float noise(vec3 r) {
	  vec3 s = vec3(7502, 22777, 4767);
	  float f = 0.0;
	  for(int i=0; i<16; i++) {
	    f += sin( dot(s - vec3(32768, 32768, 32768), r * 1.0) / 65536.0);
	    s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
	  }
	  return f / 32.0 + 0.5;
	}

	vec3 noiseGrad(vec3 r) {
	  vec3 s = vec3(7502, 22777, 4767);
	  vec3 f = vec3(0.0, 0.0, 0.0);
	  for(int i=0; i<16; i++) {
	    f += cos( dot(s - vec3(32768, 32768, 32768), r*40.0)
	                   / 65536.0) * (s - vec3(32768, 32768, 32768)) * 40.0;
	    s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
	  }
	  return f / 65536.0;
	}

  // scale = 16;
  // turbulence = 500;
  // period = 8;
  // sharpness = 10;
  vec4 getWoodColor(vec3 position, float scale, float turbulence, float period, float sharpness) {
	    float w = position.x * period + pow( noise(position * scale), sharpness) * turbulence; 
	    
	    w = mod(w, 1.0);
	    
	    vec3 color3 = (vec3(1.0, 0.3, 0.0) * w) + (vec3(0.35, 0.1, 0.05) * (1.0 - w));

	    return vec4(color3, 1);
  }

  // scale = 32;
  // turbulence = 50;
  // period = 32;
  // sharpness = 1;
  vec4 getMarbleColor(vec3 position, float scale, float turbulence, float period, float sharpness) {
	  float w = position.x * period + pow( noise(position * scale), sharpness)*turbulence;

	  w = pow(sin(w)*0.5+0.5, 4.0); // use smooth sine for soft stripes

	  vec3 color3 = vec3(0.0, 0.0, 0.0) * w + vec3(1.0, 1.0, 1.0) * (1.0-w); // veins + rock

	  return vec4(color3, 1);;  
  }

	// float intersectQuadric(mat4 A, vec4 e, vec4 d) {
	// 	float a = dot(d * A, d);
	// 	float b = dot(d * A, e) + dot(e * A, d);
	// 	float c = dot(e * A, e);

	// 	float discriminent = pow(b, 2.0) - 4.0*a*c;
	// 	if (discriminent < 0.0) {
	// 		return -1.0; // no intersection
	// 	}

	// 	float t1 = ((-1.0 * b) + sqrt(discriminent)) / (2.0*a);
	// 	float t2 = ((-1.0 * b) - sqrt(discriminent)) / (2.0*a);

	// 	if (t1 < 0.0) {
	// 		return t2;
	// 	} else if (t2 < 0.0) {
	// 		return t1;
	// 	} else {
	// 		if (t1 < t2) {
	// 			return t1;
	// 		} else {
	// 			return t2;
	// 		}
	// 	}
	// }

	float intersectClippedQuadric(mat4 A, mat4 B, vec4 e, vec4 d) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);

		float discriminent = pow(b, 2.0) - 4.0*a*c;
		if (discriminent < 0.0) {
			return -1.0; // no intersection
		}

		float t1 = ((-1.0 * b) + sqrt(discriminent)) / (2.0*a);
		float t2 = ((-1.0 * b) - sqrt(discriminent)) / (2.0*a);

		vec4 h1 = e + (d * t1);
		vec4 h2 = e + (d * t2);

		// In the clipped shape?
		if (dot(h1 * B, h1) > 0.0) {
			t1 = -1.0;
		}

		if (dot(h2 * B, h2) > 0.0) {
			t2 = -1.0;
		}
		///////////

		if (t1 < 0.0) {
			return t2;
		} else if (t2 < 0.0) {
			return t1;
		} else {
			if (t1 < t2) {
				return t1;
			} else {
				return t2;
			}
		}
	}

	float intersectClippedQuadricQueen(mat4 A, mat4 B, vec4 e, vec4 d) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);

		float discriminent = pow(b, 2.0) - 4.0*a*c;
		if (discriminent < 0.0) {
			return -1.0; // no intersection
		}

		float t1 = ((-1.0 * b) + sqrt(discriminent)) / (2.0*a);
		float t2 = ((-1.0 * b) - sqrt(discriminent)) / (2.0*a);

		vec4 h1 = e + (d * t1);
		vec4 h2 = e + (d * t2);

		// In the clipped shape?
		if (dot(h1 * B, h1) > 0.0) {
			t1 = -1.0;
		}

		if (dot(h2 * B, h2) > 0.0) {
			t2 = -1.0;
		}

		float proClipper1 = mod(((h1.x + h1.y + h1.z) * 10.0), 3.0);
		float proClipper2 = mod(((h2.x + h2.y + h2.z) * 10.0), 3.0);

		if(proClipper1 < 0.7) {
			t1 = -1.0;
		}
		if(proClipper2 < 0.7) {
			t2 = -1.0;
		}
		///////////

		if (t1 < 0.0) {
			return t2;
		} else if (t2 < 0.0) {
			return t1;
		} else {
			if (t1 < t2) {
				return t1;
			} else {
				return t2;
			}
		}
	}

	float intersectTwiceClippedQuadric(mat4 A, mat4 B, mat4 C, vec4 e, vec4 d) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);

		float discriminent = pow(b, 2.0) - 4.0*a*c;
		if (discriminent < 0.0) {
			return -1.0; // no intersection
		}

		float t1 = ((-1.0 * b) + sqrt(discriminent)) / (2.0*a);
		float t2 = ((-1.0 * b) - sqrt(discriminent)) / (2.0*a);

		vec4 h1 = e + (d * t1);
		vec4 h2 = e + (d * t2);

		// In the clipped shape?
		if (dot(h1 * B, h1) > 0.0) {
			t1 = -1.0;
		}
		if (dot(h2 * B, h2) > 0.0) {
			t2 = -1.0;
		}
		if (dot(h1 * C, h1) > 0.0) {
			t1 = -1.0;
		}
		if (dot(h2 * C, h2) > 0.0) {
			t2 = -1.0;
		}

		// if(fract(h1.x) < 0.5) {
		// 	t1 = -1.0;
		// }
		// if(fract(h2.x) < 0.5) {
		// 	t2 = -1.0;
		// }

		///////////

		if (t1 < 0.0) {
			return t2;
		} else if (t2 < 0.0) {
			return t1;
		} else {
			if (t1 < t2) {
				return t1;
			} else {
				return t2;
			}
		}
	}

	float intersectTwiceClippedQuadricRook(mat4 A, mat4 B, mat4 C, vec4 e, vec4 d) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);

		float discriminent = pow(b, 2.0) - 4.0*a*c;
		if (discriminent < 0.0) {
			return -1.0; // no intersection
		}

		float t1 = ((-1.0 * b) + sqrt(discriminent)) / (2.0*a);
		float t2 = ((-1.0 * b) - sqrt(discriminent)) / (2.0*a);

		vec4 h1 = e + (d * t1);
		vec4 h2 = e + (d * t2);

		// In the clipped shape?
		if (dot(h1 * B, h1) > 0.0) {
			t1 = -1.0;
		}
		if (dot(h2 * B, h2) > 0.0) {
			t2 = -1.0;
		}
		if (dot(h1 * C, h1) > 0.0) {
			t1 = -1.0;
		}
		if (dot(h2 * C, h2) > 0.0) {
			t2 = -1.0;
		}


		// mod(((x + y + z) * something), something)
		if(fract(h1.x) < 0.1 || fract(h1.z) < 0.1) {
			t1 = -1.0;
		}
		if(fract(h2.x) < 0.1 || fract(h2.z) < 0.1) {
			t2 = -1.0;
		}

		///////////

		if (t1 < 0.0) {
			return t2;
		} else if (t2 < 0.0) {
			return t1;
		} else {
			if (t1 < t2) {
				return t1;
			} else {
				return t2;
			}
		}
	}

	bool findBestHit(vec4 e, vec4 d, inout float bestT, out vec4 bestBrdf, out mat4 bestA, inout bool isWhite, inout bool isSilver, inout bool isGold) {
		isWhite = false;
		isSilver = false;
		isGold = false;

		for(int i = 0; i < 36; i+=2) {
			float tempT = intersectClippedQuadric(quadrics[i], quadrics[i + 1], e, d);

			if (bestT < 0.0) {
				bestT = tempT;
				bestBrdf = brdfs[i/2];
				bestA = quadrics[i];
				
			} else if (tempT > 0.0 && tempT < bestT) {
				bestT = tempT;
				bestBrdf = brdfs[i/2];
				bestA = quadrics[i];
				isWhite = true;
				isSilver = false;
				isGold = false;
				// if (i < 16) {
				if (i < 32) {
					isSilver = true;
				}
				if (i > 31) {
					isGold = true;
				}
			}
		}

		for(int i = 36; i < 38; i+=2) {
			float tempT = intersectClippedQuadricQueen(quadrics[i], quadrics[i + 1], e, d);

			if (bestT < 0.0) {
				bestT = tempT;
				bestBrdf = brdfs[i/2];
				bestA = quadrics[i];
			} else if (tempT > 0.0 && tempT < bestT) {
				bestT = tempT;
				bestBrdf = brdfs[i/2];
				bestA = quadrics[i];
				isWhite = true;
				isSilver = false;
				isGold = false;
			}
		}

		for(int i = 38; i < 104; i+=2) {
			float tempT = intersectClippedQuadric(quadrics[i], quadrics[i + 1], e, d);

			if (bestT < 0.0) {
				bestT = tempT;
				bestBrdf = brdfs[i/2];
				bestA = quadrics[i];
				
			} else if (tempT > 0.0 && tempT < bestT) {
				bestT = tempT;
				bestBrdf = brdfs[i/2];
				bestA = quadrics[i];
				isGold = false;
				isWhite = false;
				if (i < 52) {
					isWhite = true;
				}
				isSilver = false;
				if (i < 40) {
					isSilver = true;
				}
			}
		}

		// doubly clipped quadric
		for(int i = 0; i < 3; i+=3) {
			float tempT = intersectTwiceClippedQuadric(mcc[i], mcc[i + 1], mcc[i+2], e, d);

			 if (bestT < 0.0) {
				bestT = tempT;
				bestBrdf = brdfs[i/2];
				bestA = mcc[i];
				// isSilver = false;
			} else if (tempT > 0.0 && tempT < bestT) {
				bestT = tempT;
				bestBrdf = brdfs[i/2];
				bestA = mcc[i];
				if (i > 10 && i < 28) {
					isWhite = true;
				} else {
					isWhite = false;
				}
				isSilver = false;
				isGold = false;
			}
		}

		// doubly clipped quadric
		for(int i = 3; i < 39; i+=3) {
			float tempT = intersectTwiceClippedQuadricRook(mcc[i], mcc[i + 1], mcc[i+2], e, d);

			 if (bestT < 0.0) {
				bestT = tempT;
				bestBrdf = brdfs[i/2];
				bestA = mcc[i];
			} else if (tempT > 0.0 && tempT < bestT) {
				bestT = tempT;
				bestBrdf = brdfs[i/2];
				bestA = mcc[i];
				if (i > 10 && i < 28) {
					isWhite = true;
					// isSilver = true;
				} else {
					isWhite = false;
					// isSilver = false;
				}
				isSilver = false;
				isGold = false;
			}
		}

		return (bestT > 0.0);
	}

	vec4 shadeShiny(vec3 worldPos, vec3 worldNormal) {
		vec3 baseColor = vec3(1.0, 1.0, 1.0);
		vec3 apparentColor = vec3(0, 0, 0);

		for (int i = 0; i < 1; i++) {
			vec3 lightDir = lightPos[i].xyz - (worldPos * lightPos[i].w);
			vec3 h = normalize(lightDir) + normalize(cameraPos - worldPos);
			float cos = dot( normalize(worldNormal), normalize(h));
			float shininess = pow( max(cos, 0.0), 6.0);
			vec3 middle = lightPowerDensity[i] / dot(lightDir,lightDir);
			float spotLight = max( dot( normalize(lightDir), normalize(spotDir[i])), 0.0);

			// TEST FOR INTERSECTION
			vec4 e = vec4(worldPos + (0.1 * lightDir), 1.0);
			vec4 d = vec4(lightDir, 0.0);
			float bestT = 1000000000.0;
			vec4 bestBrdf;
			mat4 bestA;
			bool isWhite = false;
			bool isSilver = false;
			bool isGold = false;

			bool testPoint = findBestHit(e, d, bestT, bestBrdf, bestA, isWhite, isSilver, isGold);

			// INTERSECTION - DON'T UPDATE APPARENT COLOR
			if (testPoint && bestT != 1000000000.0) {
				continue;
			}

			apparentColor = apparentColor + shininess * baseColor * middle * pow(spotLight,3.0);
		}

		return vec4(apparentColor, 1);
	}

	vec4 shadeShinyWood(vec3 worldPos, vec3 worldNormal){
		vec3 baseColor = vec3(1.0, 1.0, 1.0);
		vec3 apparentColor = vec3(0, 0, 0);

		for (int i = 0; i < 1; i++) {
			vec3 lightDir = lightPos[i].xyz - (worldPos * lightPos[i].w);

			vec3 h = normalize(lightDir) + normalize(cameraPos - worldPos);

			float cos = dot( normalize(worldNormal), normalize(h));

			float shininess = pow( max(cos, 0.0), 6.0);

			vec3 middle = lightPowerDensity[i] / dot(lightDir,lightDir);

			float spotLight = max( dot( normalize(lightDir), normalize(spotDir[i])), 0.0);

			// TEST FOR INTERSECTION
			vec4 e = vec4(worldPos + (0.1 * lightDir), 1.0);
			vec4 d = vec4(lightDir, 0.0);
			float bestT = 1000000000.0;
			vec4 bestBrdf;
			mat4 bestA;
			bool isWhite = false;
			bool isSilver = false;
			bool isGold = false;

			bool testPoint = findBestHit(e, d, bestT, bestBrdf, bestA, isWhite, isSilver, isGold);

			// INTERSECTION - DON'T UPDATE APPARENT COLOR
			if (testPoint && bestT != 1000000000.0) {
				continue;
			}

			apparentColor = apparentColor + getWoodColor(worldPos, 16.0, 500.0, 8.0, 10.0).xyz;
			apparentColor = apparentColor + shininess * baseColor * middle * pow(spotLight,3.0);
		}
		return vec4(apparentColor, 1);
	}

	vec4 shadeShinyMarble(vec3 worldPos, vec3 worldNormal){
		vec3 baseColor = vec3(1.0, 1.0, 1.0);
		vec3 apparentColor = vec3(0, 0, 0);

		for (int i = 0; i < 1; i++) {
			vec3 lightDir = lightPos[i].xyz - (worldPos * lightPos[i].w);

			vec3 h = normalize(lightDir) + normalize(cameraPos - worldPos);

			float cos = dot( normalize(worldNormal), normalize(h));

			float shininess = pow( max(cos, 0.0), 6.0);

			vec3 middle = lightPowerDensity[i] / dot(lightDir,lightDir);

			float spotLight = max( dot( normalize(lightDir), normalize(spotDir[i])), 0.0);

			// TEST FOR INTERSECTION
			vec4 e = vec4(worldPos + (0.1 * lightDir), 1.0);
			vec4 d = vec4(lightDir, 0.0);
			float bestT = 1000000000.0;
			vec4 bestBrdf;
			mat4 bestA;
			bool isWhite = false;
			bool isSilver = false;
			bool isGold = false;

			bool testPoint = findBestHit(e, d, bestT, bestBrdf, bestA, isWhite, isSilver, isGold);

			// INTERSECTION - DON'T UPDATE APPARENT COLOR
			if (testPoint && bestT != 1000000000.0) {
				continue;
			}

			apparentColor = apparentColor + getMarbleColor(worldPos, 32.0, 50.0, 32.0, 1.0).xyz;

			apparentColor = apparentColor + shininess * baseColor * middle * pow(spotLight,3.0);
		}
		return vec4(apparentColor, 1);
	}

	vec4 shadeShinyGold(vec3 worldPos, vec3 worldNormal) {
		vec3 reflRayDir = reflect(normalize(rayDir), worldNormal);
		vec4 e = vec4(worldPos + (0.1 * reflRayDir), 1.0);
		vec4 d = vec4(reflRayDir, 0.0);
		float bestT = 1000000000.0;
		vec4 bestBrdf;
		mat4 bestA;
		bool isWhite = false;
		bool isSilver = false;
		bool isGold = false;

		bool testPoint = findBestHit(e, d, bestT, bestBrdf, bestA, isWhite, isSilver, isGold);

		vec4 intersectionPoint = vec4(1.0, 1.0, 1.0, 1.0);
		vec3 quadricNormal = vec3(1.0, 1.0, 1.0);

		float alpha = dot(-1.0 * reflRayDir, worldNormal);
		vec3 valR = goldR0 + ((1.0 - goldR0) * pow((1.0 - cos(alpha)), 5.0));

		vec4 outColor = vec4(0.0, 0.0, 0.0, 0.0);
		bool setYet = false;


		for (int i = 0; i < 4; i++) {
			if (!testPoint || bestT == 1000000000.0) { // no intersection, shade as normal
				//find corresponding point in light probe
				vec3 sphereSurfacePos = normalize(vec3(0.0, 0.0, 1.0) + normalize(reflRayDir)) / 2.0; // average the reflDir and the original view point
				vec2 probeTex = vec2(sphereSurfacePos.x, -1.0 * sphereSurfacePos.y) + vec2(0.5, 0.5);
				outColor = texture2D(probeTexture, probeTex);
				setYet = true;
				break;
			}

			// intersection, draw the color
			intersectionPoint = e + (d * bestT);
			quadricNormal = normalize((bestA*intersectionPoint + intersectionPoint*bestA).xyz);


			if (abs(intersectionPoint.y - 1.0) < .001) { // board
				float xCor = floor(intersectionPoint.x / 2.0);
				float zCor = floor(intersectionPoint.z / 2.0);
				if (mod((xCor + zCor), 2.0) < 0.5) {
					outColor = shadeShinyWood(intersectionPoint.xyz, quadricNormal);
					setYet = true;
					break;
				} else {
					outColor = shadeShinyMarble(intersectionPoint.xyz, quadricNormal);
					setYet = true;
					break;
				}
			} else { // normal pieces
				// normal mapping
				vec3 bumpy = normalize(quadricNormal + (noiseGrad(intersectionPoint.xyz * 5.0) * 0.007));

				if (!isSilver && isWhite) {
					outColor = shadeShiny(intersectionPoint.xyz, quadricNormal) + vec4(0.5, 0.5, 0.5, 0);
					setYet = true;
					break;
					// gl_FragColor = shadeShiny(intersectionPoint.xyz, quadricNormal);
				} else if (isSilver) {
					reflRayDir = reflect(normalize(reflRayDir), quadricNormal);
					e = vec4(intersectionPoint.xyz + (0.1 * reflRayDir), 1.0);
					d = vec4(reflRayDir, 0.0);
					bestT = 1000000000.0;
					bestBrdf;
					bestA;
					isWhite = false;
					isSilver = false;
					isGold = false;
					testPoint = findBestHit(e, d, bestT, bestBrdf, bestA, isWhite, isSilver, isGold);

					alpha = dot(-1.0 * reflRayDir, worldNormal);
					vec3 valR = goldR0 + ((1.0 - goldR0) * pow((1.0 - cos(alpha)), 5.0));
					continue;

					// return shadeShinySilver(intersectionPoint.xyz, quadricNormal);
				} else {
					// gl_FragColor = shadeShiny(intersectionPoint.xyz, quadricNormal);
					outColor = shadeShiny(intersectionPoint.xyz, bumpy);
					setYet = true;
					break;
				}		
			}
		}
		
		if (!setYet) {
			outColor = shadeShiny(intersectionPoint.xyz, quadricNormal);
		}

		return outColor * vec4(valR, 1.0);
	}

	vec4 shadeShinySilver(vec3 worldPos, vec3 worldNormal) {
		vec3 reflRayDir = reflect(normalize(rayDir), worldNormal);
		vec4 e = vec4(worldPos + (0.1 * reflRayDir), 1.0);
		vec4 d = vec4(reflRayDir, 0.0);
		float bestT = 1000000000.0;
		vec4 bestBrdf;
		mat4 bestA;
		bool isWhite = false;
		bool isSilver = false;
		bool isGold = false;

		bool testPoint = findBestHit(e, d, bestT, bestBrdf, bestA, isWhite, isSilver, isGold);

		vec4 intersectionPoint = vec4(1.0, 1.0, 1.0, 1.0);
		vec3 quadricNormal = vec3(1.0, 1.0, 1.0);

		float alpha = dot(-1.0 * reflRayDir, worldNormal);
		vec3 valR = silverR0 + ((1.0 - silverR0) * pow((1.0 - cos(alpha)), 5.0));
		// vec3 valR = vec3(1.0, 1.0, 1.0);

		vec4 outColor = vec4(0.0, 0.0, 0.0, 0.0);
		bool setYet = false;


		for (int i = 0; i < 4; i++) {
			if (!testPoint || bestT == 1000000000.0) { // no intersection, shade as normal
				//find corresponding point in light probe
				vec3 sphereSurfacePos = normalize(vec3(0.0, 0.0, 1.0) + normalize(reflRayDir)) / 2.0; // average the reflDir and the original view point
				vec2 probeTex = vec2(sphereSurfacePos.x, -1.0 * sphereSurfacePos.y) + vec2(0.5, 0.5);
				outColor = texture2D(probeTexture, probeTex);
				setYet = true;
				break;
			}

			// intersection, draw the color
			intersectionPoint = e + (d * bestT);
			quadricNormal = normalize((bestA*intersectionPoint + intersectionPoint*bestA).xyz);


			if (abs(intersectionPoint.y - 1.0) < .001) { // board
				float xCor = floor(intersectionPoint.x / 2.0);
				float zCor = floor(intersectionPoint.z / 2.0);
				if (mod((xCor + zCor), 2.0) < 0.5) {
					outColor = shadeShinyWood(intersectionPoint.xyz, quadricNormal);
					setYet = true;
					break;
				} else {
					outColor = shadeShinyMarble(intersectionPoint.xyz, quadricNormal);
					setYet = true;
					break;
				}
			} else { // normal pieces
				// normal mapping
				vec3 bumpy = normalize(quadricNormal + (noiseGrad(intersectionPoint.xyz * 4.0) * 0.007)); // QUESTION

				if (!isSilver && isWhite) {
					outColor = shadeShiny(intersectionPoint.xyz, quadricNormal) + vec4(0.5, 0.5, 0.5, 0);
					setYet = true;
					break;
					// gl_FragColor = shadeShiny(intersectionPoint.xyz, quadricNormal);
				} else if (isSilver) {
					reflRayDir = reflect(normalize(reflRayDir), quadricNormal);
					e = vec4(intersectionPoint.xyz + (0.1 * reflRayDir), 1.0);
					d = vec4(reflRayDir, 0.0);
					bestT = 1000000000.0;
					bestBrdf;
					bestA;
					isWhite = false;
					isSilver = false;
					isGold = false;
					testPoint = findBestHit(e, d, bestT, bestBrdf, bestA, isWhite, isSilver, isGold);

					alpha = dot(-1.0 * reflRayDir, worldNormal);
					vec3 valR = silverR0 + ((1.0 - silverR0) * pow((1.0 - cos(alpha)), 5.0));
					continue;
				} else {
					// gl_FragColor = shadeShiny(intersectionPoint.xyz, quadricNormal);
					outColor = shadeShiny(intersectionPoint.xyz, bumpy);
					setYet = true;
					break;
				}		
			}
		}
		
		if (!setYet) {
			outColor = shadeShiny(intersectionPoint.xyz, quadricNormal);
		}

		return outColor * vec4(valR, 1.0);
	}

	void main(void) {
		vec4 e = vec4(cameraPos, 1.0);
		vec4 d = vec4(rayDir, 0.0);
		float bestT = 1000000000.0;
		vec4 bestBrdf;
		mat4 bestA;
		bool isWhite = false;
		bool isSilver = false;
		bool isGold = false;

		bool testPoint = findBestHit(e, d, bestT, bestBrdf, bestA, isWhite, isSilver, isGold);

		if (!testPoint || bestT == 1000000000.0) { // no intersection, shade as normal
			//find corresponding point in light probe
			vec3 sphereSurfacePos = normalize(vec3(0.0, 0.0, 1.0) + normalize(rayDir)) / 2.0; // average the reflDir and the original view point
			vec2 probeTex = vec2(sphereSurfacePos.x, -1.0 * sphereSurfacePos.y) + vec2(0.5, 0.5);
			gl_FragColor = texture2D(probeTexture, probeTex);
			return;
		}

		// intersection, draw the color
		vec4 intersectionPoint = e + (d * bestT);
		vec3 quadricNormal = normalize((bestA*intersectionPoint + intersectionPoint*bestA).xyz);

		if (abs(intersectionPoint.y + 1.0) < .001) { // get rid of secondary board
			vec3 sphereSurfacePos = normalize(vec3(0.0, 0.0, 1.0) + normalize(rayDir)) / 2.0; // average the reflDir and the original view point
			vec2 probeTex = vec2(sphereSurfacePos.x, -1.0 * sphereSurfacePos.y) + vec2(0.5, 0.5);
			gl_FragColor = texture2D(probeTexture, probeTex);
			return;
		}

		if (abs(intersectionPoint.y - 1.0) < .001) { // board
			float xCor = floor(intersectionPoint.x / 2.0);
			float zCor = floor(intersectionPoint.z / 2.0);
			if (mod((xCor + zCor), 2.0) < 0.5) {
				gl_FragColor = shadeShinyWood(intersectionPoint.xyz, quadricNormal);
			} else {
				gl_FragColor = shadeShinyMarble(intersectionPoint.xyz, quadricNormal);
			}
		} else { // normal pieces
			// normal mapping
			vec3 bumpy = normalize(quadricNormal + (noiseGrad(intersectionPoint.xyz * 5.0) * 0.007)); // QUESTION

			if (!isSilver && !isGold && isWhite) {
				gl_FragColor = shadeShiny(intersectionPoint.xyz, quadricNormal) + vec4(0.5, 0.5, 0.5, 0);
				// gl_FragColor = shadeShiny(intersectionPoint.xyz, quadricNormal);
			} else if (isSilver) {
				// gl_FragColor = shadeShiny(intersectionPoint.xyz, quadricNormal) + vec4(0.8, 0.8, 0.8, 0);
				gl_FragColor = shadeShinySilver(intersectionPoint.xyz, quadricNormal);
			} else if (isGold) {
				gl_FragColor = shadeShinyGold(intersectionPoint.xyz, quadricNormal);
			} else {
				// gl_FragColor = shadeShiny(intersectionPoint.xyz, quadricNormal);
				gl_FragColor = shadeShiny(intersectionPoint.xyz, bumpy);
			}		
		}
	}
`;